# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui_futures.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import signal

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow
import sys
from PyQt5.QtGui import *
import re
from multiprocessing import Process

import requests
import json
from urllib import parse
from datetime import datetime
import hmac
import base64
from hashlib import sha256
import redis
import time


BG_COLOR = "#171B2B"
BID_COLOR = "#00b464"
ASK_COLOR = "#fa4d56"
INDEX_COLOR = "#f4f9ff"
RATIO_COLOR = "red"
MENU_H = 35

COLUMN_NAME_CW = ['合约', '预期收益率(%)', '开仓张数', '平仓张数', '未平仓张数', '进程号', '操作']
# NAME = "BTC,ETH,LINK,DOT,EOS,TRX,ADA,LTC,BCH,XRP,BSV,ETC,FIL"
NAME_LIST = ["BTC", "ETH", "LINK", "DOT", "EOS", "TRX", "ADA", "LTC", "BCH", "XRP", "BSV", "ETC", "FIL"]

TABLE_HEAD_STYLE = "QHeaderView::section{background-color:#171B2B;font:12pt 'song';color: #f4f9ff;};"
TABLE_V_HEAD_STYLE = "QHeaderView::section{background-color:#171B2B;font:10pt 'Arial';color: #f4f9ff;};"
TABLE_CORNER_BTN_STYLE = "QTableCornerButton::section{background-color:#171B2B; border-width: 1px; border-style:solid;}"

COL_NUM = 7
ROW_NUM = 60
pid = 0


SECRET_KEY = {
    1: ("4733f4a9-bn2wed5t4y-3e083206-09949", "f76594ec-ef6963db-98ede52d-69713"),
    2: ()
}


def redis_pool(host, port, password=""):

    pool = redis.ConnectionPool(host=host, port=port, password=password, db=8)
    con = redis.Redis(connection_pool=pool)
    return con


CONN = redis_pool("101.33.35.86", 6379)


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1122, 713)
        MainWindow.setFixedSize(1122, 713)
        MainWindow.setStyleSheet("background: #171B2B;\n"
                                 "")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(930, 190, 113, 32))
        self.pushButton.setStyleSheet("color:#f4f9ff;\n"
                                      "font:12pt \'Arial\';\n"
                                      "border-radius: 14px;\n"
                                      "background: green;\n"
                                      "")
        self.pushButton.setObjectName("pushButton")

        self.pushButton.clicked.connect(self.run)

        self.horizontalLayoutWidget_13 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_13.setGeometry(QtCore.QRect(30, 260, 1011, 421))
        self.horizontalLayoutWidget_13.setObjectName("horizontalLayoutWidget_13")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_13)
        self.horizontalLayout_13.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.table = QtWidgets.QTableWidget()
        self.horizontalLayout_13.addWidget(self.table)


        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(640, 120, 111, 31))
        self.comboBox.setStyleSheet("color:#f4f9ff;\n"
                                    "font:12pt \'Arial\';\n"
                                    "border-radius: 10px;\n"
                                    "background: green;")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(40, 50, 41, 31))
        self.label.setStyleSheet("color:#f4f9ff;\n"
                                 "font:12pt \'Arial\';\n"
                                 "border-radius: 10px;\n"
                                 "background: #171B2B;")
        self.label.setObjectName("label")


        self.comboBox_0 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_0.setGeometry(QtCore.QRect(100, 50, 111, 31))
        self.comboBox_0.setStyleSheet("color:#f4f9ff;\n"
                                      "font:12pt \'Arial\';\n"
                                      "border-radius: 10px;\n"
                                      "background: green;")
        self.comboBox_0.setObjectName("comboBox_0")
        self.comboBox_0.addItem("")
        self.comboBox_0.addItem("")
        self.comboBox_0.addItem("")
        self.comboBox_0.addItem("")
        self.comboBox_0.addItem("")
        self.comboBox_0.addItem("")
        self.comboBox_0.addItem("")
        self.comboBox_0.addItem("")
        self.comboBox_0.addItem("")
        self.comboBox_0.addItem("")
        self.comboBox_0.addItem("")
        self.comboBox_0.addItem("")
        self.comboBox_0.addItem("")

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(570, 50, 52, 31))
        self.label_2.setStyleSheet("color:#f4f9ff;\n"
                                   "font:12pt \'Arial\';\n"
                                   "border-radius: 10px;\n"
                                   "background: #171B2B;")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(840, 50, 71, 31))
        self.label_3.setStyleSheet("color:#f4f9ff;\n"
                                   "font:12pt \'Arial\';\n"
                                   "border-radius: 10px;\n"
                                   "background: #171B2B;")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(30, 120, 52, 31))
        self.label_4.setStyleSheet("color:#f4f9ff;\n"
                                   "font:12pt \'Arial\';\n"
                                   "border-radius: 10px;\n"
                                   "background: #171B2B;")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(270, 120, 71, 31))
        self.label_5.setStyleSheet("color:#f4f9ff;\n"
                                   "font:12pt \'Arial\';\n"
                                   "border-radius: 10px;\n"
                                   "background: #171B2B;")
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(561, 120, 61, 31))
        self.label_6.setStyleSheet("color:#f4f9ff;\n"
                                   "font:12pt \'Arial\';\n"
                                   "border-radius: 10px;\n"
                                   "background: #171B2B;")
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(845, 120, 91, 31))
        self.label_7.setStyleSheet("color:#f4f9ff;\n"
                                    "font:12pt \'Arial\';\n"
                                    "border-radius: 10px;\n"
                                    "background: #171B2B;")
        self.label_7.setObjectName("label_7")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(100, 120, 111, 31))
        self.lineEdit_2.setStyleSheet("font:12pt \'Arial\';\n"
                                      "border-radius: 10px;\n"
                                      "background: white;")
        self.lineEdit_2.setText("")
        self.lineEdit_2.setObjectName("lineEdit_2")

        self.label_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_1.setGeometry(QtCore.QRect(300, 50, 41, 31))
        self.label_1.setStyleSheet("color:#f4f9ff;\n"
                                   "font:12pt \'Arial\';\n"
                                   "border-radius: 10px;\n"
                                   "background: #171B2B;")
        self.label_1.setObjectName("label_1")

        self.comboBox_1 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_1.setGeometry(QtCore.QRect(360, 50, 111, 31))
        self.comboBox_1.setStyleSheet("color:#f4f9ff;\n"
                                      "font:12pt \'Arial\';\n"
                                      "border-radius: 10px;\n"
                                      "background: green;")
        self.comboBox_1.setObjectName("comboBox_1")
        self.comboBox_1.addItem("")
        self.comboBox_1.addItem("")
        self.comboBox_1.addItem("")
        self.comboBox_1.addItem("")

        self.lineEdit_1 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_1.setGeometry(QtCore.QRect(640, 50, 111, 31))
        self.lineEdit_1.setStyleSheet("font:12pt \'Arial\';\n"
                                      "border-radius: 10px;\n"
                                      "background: white;")
        self.lineEdit_1.setText("")
        self.lineEdit_1.setObjectName("lineEdit_1")

        self.comboBox_2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_2.setGeometry(QtCore.QRect(930, 50, 111, 31))
        self.comboBox_2.setStyleSheet("color:#f4f9ff;\n"
                                      "font:12pt \'Arial\';\n"
                                      "border-radius: 10px;\n"
                                      "background: green;")
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")

        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(360, 120, 111, 31))
        self.lineEdit_3.setStyleSheet("font:12pt \'Arial\';\n"
                                       "border-radius: 10px;\n"
                                       "background: white;")
        self.lineEdit_3.setText("")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.comboBox_3 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_3.setGeometry(QtCore.QRect(930, 120, 111, 31))
        self.comboBox_3.setStyleSheet("color:#f4f9ff;\n"
                                      "font:12pt \'Arial\';\n"
                                      "border-radius: 10px;\n"
                                      "background: green;")
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "执行"))
        self.comboBox.setItemText(0, _translate("MainWindow", "10"))
        self.comboBox.setItemText(1, _translate("MainWindow", "50"))
        self.comboBox.setItemText(2, _translate("MainWindow", "100"))
        # self.comboBox.setItemText(3, _translate("MainWindow", "4"))
        # self.comboBox.setItemText(4, _translate("MainWindow", "5"))
        # self.comboBox.setItemText(5, _translate("MainWindow", "6"))
        self.label.setText(_translate("MainWindow", "     币种"))
        self.label_1.setText(_translate("MainWindow", "  期次"))
        self.label_2.setText(_translate("MainWindow", "开仓金额"))
        self.label_3.setText(_translate("MainWindow", "    合约倍数"))
        self.label_4.setText(_translate("MainWindow", "开仓利差"))
        self.label_5.setText(_translate("MainWindow", "    平仓利差"))
        self.label_6.setText(_translate("MainWindow", "   平仓张数"))
        self.label_7.setText(_translate("MainWindow", "       密钥"))

        for i in range(len(SECRET_KEY)):
            self.comboBox_3.setItemText(i, _translate("MainWindow", str(i+1)))

        self.comboBox_1.setItemText(0, _translate("MainWindow", "_CW"))
        self.comboBox_1.setItemText(1, _translate("MainWindow", "_NW"))
        self.comboBox_1.setItemText(2, _translate("MainWindow", "_CQ"))
        self.comboBox_1.setItemText(3, _translate("MainWindow", "_NQ"))

        self.comboBox_2.setItemText(0, _translate("MainWindow", "1"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "5"))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "10"))

        i = 0
        for item in NAME_LIST:
            self.comboBox_0.setItemText(i, _translate("MainWindow", item))
            i += 1

        # 设置表头背景色
        self.table.horizontalHeader().setStyleSheet(TABLE_HEAD_STYLE)
        self.table.verticalHeader().setStyleSheet(TABLE_V_HEAD_STYLE)
        # self.table.setStyleSheet(TABLE_CORNER_BTN_STYLE)

        # self.table.verticalHeader().hide()    # 隐藏行号

        # 全局背景色
        self.table.setStyleSheet("*{background:%s}" % BG_COLOR)
        app.setStyleSheet(TABLE_CORNER_BTN_STYLE)

        # 横向表头高度, 纵向表头宽度
        self.table.horizontalHeader().setFixedHeight(MENU_H)

        # 设置表头不塌陷
        self.table.horizontalHeader().setHighlightSections(False)

        # self.table.horizontalHeader().sectionClicked.connect(self.order)

        # self.table.setFrameShape(QtWidgets.QFrame.NoFrame)  # 设置无表格的外框
        # self.table.setShowGrid(False)             # 不显示格子线
        # self.table.setCornerButtonEnabled(False)  # 左上角按钮

        # self.table_cw.resize(700, 600)  # 设置表格尺寸（整体大小）
        self.table.setColumnCount(COL_NUM)  # 设置列数
        self.table.setRowCount(ROW_NUM)  # 设置行数

        # 自动匹配窗口尺寸
        self.table.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.table.setHorizontalHeaderLabels(COLUMN_NAME_CW)  # 设置列名称

        # 取消单元格选中虚线框
        # self.table.setFocusPolicy(0)
        # self.table.setSelectionMode(0)
        # self.table.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)

    def button(self):
        widget = QtWidgets.QWidget()
        # 修改
        # self.updateBtn = QtWidgets.QPushButton('修改')
        # self.updateBtn.setStyleSheet(''' text-align : center;
        #                                   background-color : NavajoWhite;
        #                                   height : 30px;
        #                                   border-style: outset;
        #                                   font : 13px  ''')

        # 删除
        self.deleteBtn = QtWidgets.QPushButton('删除')
        self.deleteBtn.setStyleSheet(''' text-align : center;
                                    background-color : LightCoral;
                                    height : 30px;
                                    border-style: outset;
                                    font : 13px; ''')
        self.deleteBtn.clicked.connect(lambda: self.killpid(""))

        hLayout = QtWidgets.QHBoxLayout()
        # hLayout.addWidget(self.updateBtn)
        hLayout.addWidget(self.deleteBtn)
        hLayout.setContentsMargins(5, 2, 5, 2)
        widget.setLayout(hLayout)
        return widget

    def run(self):

        currency = self.comboBox_0.currentText()
        step = self.comboBox_1.currentText()
        open_num = self.lineEdit_1.text()
        contract_multi = self.comboBox_2.currentText()
        open_rate = self.lineEdit_2.text()
        flat_rate = self.lineEdit_3.text()
        flat_num = self.comboBox.currentText()
        secret_key = self.comboBox_3.currentText()

        secret_key = SECRET_KEY.get(int(secret_key))
        print(secret_key)

        name = QtWidgets.QTableWidgetItem("BTC_CW")
        self.table.setItem(0, 0, name)

        ratio = QtWidgets.QTableWidgetItem("22")
        self.table.setItem(0, 1, ratio)

        self.table.setCellWidget(0, COL_NUM - 1, self.button())
        self.table.setCellWidget(1, COL_NUM - 1, self.button())
        print(currency, step, open_num, contract_multi, open_rate, flat_rate, flat_num, secret_key)

        p = Process(target=self.trade, args=(secret_key[0], secret_key[1], currency, step, contract_multi, open_rate, flat_rate, flat_num))
        p.start()

        # pid = QtWidgets.QTableWidgetItem("6666")
        # # name.setFont(QtGui.QFont("Arial", 10))
        # # name.setForeground(QtGui.QBrush(QtGui.QColor(INDEX_COLOR)))
        # # name.setTextAlignment(Qt.AlignCenter)
        # self.table.setItem(0, COL_NUM - 2, pid)

    def killpid(self, pid):

        button = self.table.sender()
        if button:
            # 确定位置的时候这里是关键
            row = self.table.indexAt(button.parent().pos()).row()
            # self.tableWidget.removeRow(row)
            print(row)
            name = self.table.item(row, COL_NUM - 2).text()
            print(name)

        # a = os.kill(pid, signal.SIGKILL)


    def test(self):

        pid = os.getpid()
        print("Pid:  ", pid)


        pid = QtWidgets.QTableWidgetItem(str(pid))
        # name.setFont(QtGui.QFont("Arial", 10))
        # name.setForeground(QtGui.QBrush(QtGui.QColor(INDEX_COLOR)))
        # name.setTextAlignment(Qt.AlignCenter)
        self.table.setItem(0, COL_NUM - 2, pid)

        # a = os.kill(pid, signal.SIGKILL)
        # while 1:
        #     print(111)
        #     time.sleep(10)

    def trade(self, api_key, secret_key, currency, step, contract_multi, open_rate, flat_rate, flat_num):

        api_key = api_key
        secret_key = secret_key
        etpname = currency.lower()
        symbol = etpname + "usdt"

        subpid = os.getpid()
        print("Sub pid:  ", subpid)

        if step == "_CW":
            contract_type = "this_week"
        elif step == "_NW":
            contract_type = "next_week"
        elif step == "_CQ":
            contract_type = "quarter"
        else:
            contract_type = "next_quarter"
        volume = flat_num                       # 下单张数
        lever_rate = contract_multi             # 杠杆倍数

        kc_licha = open_rate        # 开仓利差
        pc_licha = flat_rate        # 平仓利差

        open_num = 0
        open_volumn = 0
        close_num = 0
        close_volumn = 0

        redis_etp = currency + step
        ratio = float(open_rate) - float(flat_rate)

        while 1:
            try:
                # api = SpotMarket(api_key, secret_key)
                # futures_api = RestMarket(api_key, secret_key)

                # market_info = api.get_market_detail_merged("ethusdt")
                # # print(d)
                # # 现货卖一、买一
                # ask = market_info.get("tick").get('ask')[0]
                # bid = market_info.get("tick").get('bid')[0]
                # print(ask, bid)
                #
                # futures_market = futures_api.get_market_detail({"symbol": "ETH_NW"})
                # # 合约卖一、买一
                # futures_ask = futures_market.get("tick").get('ask')[0]
                # futures_bid = futures_market.get("tick").get('bid')[0]
                # print(futures_ask, futures_bid)
                #
                # acc_id = api.get_account_id()
                #
                # if futures_bid * kc_licha > ask:
                #
                #     data = {"account-id": acc_id, "amount": flat_num, "source": "spot-api", "symbol": symbol, "type": "buy-market"}
                #     buy = api.post_create_order(data)
                #     print('购买现货：', buy)
                #
                #     info = api.get_account_balance(acc_id)
                #     # pprint(info)
                #     print(len(info))
                #
                #     for item in info:
                #         if item.get("currency") == etpname and item.get("type") == "trade":
                #             balance = item.get("balance")
                #             print(item)
                #             print(balance)
                #
                #             amount = re.findall(r"\d{1,}?\.\d{4}", str(balance))[0]
                #             amount = (float(amount))
                #             print('现货可划转余额：', amount)
                #             r = api.pro_to_futures(etpname, amount, 'pro-to-futures')
                #             print('现货划转至合约:', r)
                #
                #             contract_info = futures_api.contract_account_info(etpname.upper()).get('data')[0]
                #             margin_available = contract_info.get("margin_available")
                #             open_volumn_1 = int(margin_available * ask/10)
                #
                #             xd = futures_api.post_futures_create_order(etpname, contract_type, open_volumn_1, 'sell', 'open', lever_rate, 'opponent')
                #             print('合约开仓：', xd)
                #
                #             open_volumn += open_volumn_1
                #             open_num += 1
                #             print("执行开仓总张数：", open_volumn)
                #
                #             break
                #
                # if futures_ask < bid * pc_licha:
                #
                #     xd = futures_api.post_futures_create_order(etpname, contract_type, volume, 'buy', 'close', lever_rate, 'opponent')
                #     print('合约平仓：', xd)
                #
                #     for item in futures_api.contract_account_info(etpname.upper()).get('data'):
                #         hy_amount = item['withdraw_available']
                #         hy_amount = re.findall(r"\d{1,}?\.\d{4}", str(hy_amount))[0]
                #         hy_amount = (float(hy_amount))
                #         print('合约可划转余额：', hy_amount)
                #         if hy_amount > 0:
                #             hz = api.pro_to_futures(etpname, hy_amount, 'futures-to-pro')
                #             print('合约划转至现货：', hz)
                #
                #             for i in api.get_account_balance(acc_id):
                #                 if i['currency'] == etpname and i['type'] == 'trade':
                #                     amount = i['balance']
                #                     amount = re.findall(r"\d{1,}?\.\d{4}", str(amount))[0]
                #                     amount = (float(amount))
                #                     print('现货可用余额：', amount)
                #                     data = {"account-id": acc_id, "amount": amount, "source": "spot-api", "symbol": symbol, "type": "sell-market"}
                #                     r = api.post_create_order(data)
                #                     print('现货卖出：', r)
                #
                #                     close_volumn += volume
                #                     close_num += 1
                #                     print("执行平仓总张数：", close_volumn)
                #
                #                     break
                # redis_data.append((redis_etp, ratio, open_volumn, close_volumn, subpid))

                etp_info = [ratio, open_volumn, close_volumn, subpid]

                CONN.set(redis_etp, json.dumps(etp_info))

            except Exception as e:
                print('执行错误，重新执行！', e)

            time.sleep(60)


def get(host:str, path:str, params:dict = None)->json:
    try:
        url = 'https://{}{}'.format(host, path)
        headers = {'Content-type':'application/x-www-form-urlencoded'}
        res = requests.get(url, params=params, headers=headers)
        data = res.json()
        return data
    except Exception as e:
        print(e)
        return None


def api_secret_get(access_key:str, secret_key:str, host:str, path:str, params:dict = None)->json:
    try:
        url = 'https://{}{}?{}'.format(host, path, get_url_suffix('get', access_key, secret_key, host, path))
        headers = {'Content-type':'application/x-www-form-urlencoded'}
        res = requests.get(url, params=params, headers=headers)
        data = res.json()
        return data
    except Exception as e:
        print(e)
        return None


def post(access_key:str, secret_key:str, host:str, path:str, data:dict = None)->json:
    try:
        url = 'https://{}{}?{}'.format(host, path, get_url_suffix('post', access_key, secret_key, host, path))
        headers = {'Accept':'application/json', 'Content-type':'application/json'}
        res = requests.post(url, json=data, headers=headers)
        data = res.json()
        return data
    except Exception as e:
        print(e)
    return None


def get_url_suffix(method:str, access_key:str, secret_key:str, host:str, path:str)->str:
    timestamp = datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S')
    timestamp = parse.quote(timestamp)
    suffix = 'AccessKeyId={}&SignatureMethod=HmacSHA256&SignatureVersion=2&Timestamp={}'.format(access_key, timestamp)
    payload = '{}\n{}\n{}\n{}'.format(method.upper(), host, path, suffix)

    digest = hmac.new(secret_key.encode('utf8'), payload.encode('utf8'), digestmod=sha256).digest()
    signature = base64.b64encode(digest).decode()

    suffix = '{}&Signature={}'.format(suffix, parse.quote(signature))
    return suffix


class RestMarket:
    """
    合约接口
    """
    def __init__(self, access_key=None, secret_key=None, host=None):
        if host is None:
            # host = "api.hbdm.com"
            host = "api.btcgateway.pro"
        self.host = host
        self.access_key = access_key
        self.secret_key = secret_key

    def get_batch_merged(self, params: dict = None) -> json:
        """
        批量获取聚合行情
        传参数获取单个: {"symbol": "BTC_CW"}
        """
        path = "/market/detail/batch_merged"
        return get(self.host, path, params)

    def get_index(self, params: dict = None) -> json:
        """
        获取合约指数价
        传参数获取单个: {"symbol": "BTC"}
        """
        path = "/api/v1/contract_index"
        return get(self.host, path, params)

    def get_market_detail(self, params: dict = None) -> json:
        """
        获取聚合行情
        """
        path = "/market/detail/merged"
        return get(self.host, path, params)

    def post_futures_create_order(self, symbol, contract_type, volume, direction, offset, lever_rate, order_price_type):
        """
        合约下单
        """
        path = "/api/v1/contract_order"

        data = {"symbol": symbol,
                "contract_type": contract_type,
                "volume": volume,
                "direction": direction,
                "offset": offset,
                "lever_rate": lever_rate,
                "order_price_type": order_price_type
                }

        return post(self.access_key, self.secret_key, self.host, path, data)

    def contract_account_info(self, symbol):
        """
        获取合约账户信息
        :return:
        """
        path = "/api/v1/contract_account_info"

        data = {"symbol": symbol}

        return post(self.access_key, self.secret_key, self.host, path, data)


class SpotMarket:
    """
    现货接口
    """

    def __init__(self, access_key=None, secret_key=None, host=None):
        if host is None:
            host = "api.huobi.de.com"
        self.host = host
        self.access_key = access_key
        self.secret_key = secret_key

    def get_market_detail_merged(self, symbol):
        """
        现货聚合行情
        :param symbol:
        :return:
        """

        path = "/market/detail/merged"

        data = {"symbol": symbol}

        return get(self.host, path, data)

    def post_create_order(self, data):
        """
        下单
        :param access_key:
        :param secret_key:
        :param data:  {"amount": "10.1","price": "100.1","source": "api","symbol": "ethusdt","type": "buy-market"}
        :return:
        """

        path = "/v1/order/orders/place"

        return post(self.access_key, self.secret_key, self.host, path, data)

    def get_account_id(self):
        """
        获取账户id
        :return:
        """

        path = "/v1/account/accounts"

        info = api_secret_get(self.access_key, self.secret_key, self.host, path)

        return info.get("data")[0].get("id")

    def get_account_balance(self, acc_id):
        """
        获取账户余额
        :param acc_id:
        :return:
        """

        path = "/v1/account/accounts/{0}/balance".format(acc_id)

        info = api_secret_get(self.access_key, self.secret_key, self.host, path)

        data_list = info.get("data").get("list")

        return data_list

    def pro_to_futures(self, currency, amount, _type):
        """
        现货划转合约
        :param currency:
        :param amount:
        :param _type:
        :return:
        """

        path = "/v1/futures/transfer"

        data = {"currency": currency, "amount": amount, "type": _type}

        return post(self.access_key, self.secret_key, self.host, path, data)

    def get_sub_balance(self, uid):
        """
        获取子用户余额信息
        :param uid:
        :return:
        """
        path = "/v1/account/accounts/{uid}".format(uid=uid)
        print(path)

        return api_secret_get(self.access_key, self.secret_key, self.host, path)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
